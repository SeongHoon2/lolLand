name: Deploy to Lightsail Tomcat

on:
  push:
    branches: [ main ]         # main 푸시 시 자동 배포
  workflow_dispatch:            # 수동 실행 버튼

concurrency:
  group: deploy-lightsail
  cancel-in-progress: true

env:
  JAVA_VERSION: '8'
  APP_DIR: 'lolLand'
  REMOTE_TOMCAT: '/opt/tomcat'
  TOMCAT_SERVICE: 'tomcat'
  CONTEXT_NAME: 'ROOT'
  HEALTH_URL: 'http://localhost:8080/'
  WAR_GLOB: 'target/*.war'
  REMOTE_TMP: '/tmp/deploy'

jobs:
  build-and-deploy:
    name: Build WAR and Deploy
    runs-on: ubuntu-latest

    steps:
      # 0) 소스
      - name: Checkout
        uses: actions/checkout@v4

      # 1) JDK8
      - name: Set up Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      # 2) Maven 설치
      - name: Install Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven
          mvn -v

      # 3) 빌드 (Maven)
      - name: Build WAR with Maven
        working-directory: ${{ env.APP_DIR }}
        run: mvn -B -DskipTests package

      # 4) 산출물 확인
      - name: Show artifact
        run: ls -l "${{ env.APP_DIR }}/${{ env.WAR_GLOB }}"

      # 5) (선택) SSH 접속 확인
      - name: Sanity SSH check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LS_HOST }}
          username: ${{ secrets.LS_USER }}
          key: ${{ secrets.LS_SSH_KEY }}
          script: 'echo "SSH connected to $(hostname)"; uname -a'

      # 6) WAR 업로드(서버 임시 디렉터리)
      - name: Upload WAR to Lightsail (SCP)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.LS_HOST }}
          username: ${{ secrets.LS_USER }}
          key: ${{ secrets.LS_SSH_KEY }}
          source: "${{ env.APP_DIR }}/${{ env.WAR_GLOB }}"
          target: ${{ env.REMOTE_TMP }}

      # 7) Tomcat 중지→교체→시작→헬스체크
      - name: Deploy & Restart Tomcat (SSH)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LS_HOST }}
          username: ${{ secrets.LS_USER }}
          key: ${{ secrets.LS_SSH_KEY }}
          script: |
            set -euo pipefail

            REMOTE_TOMCAT="${{ env.REMOTE_TOMCAT }}"
            WEBAPPS="$REMOTE_TOMCAT/webapps"
            WORKDIR="$REMOTE_TOMCAT/work"
            TMPDIR="${{ env.REMOTE_TMP }}"
            CONTEXT="${{ env.CONTEXT_NAME }}"
            SERVICE="${{ env.TOMCAT_SERVICE }}"
            HEALTH_URL="${{ env.HEALTH_URL }}"

            sudo mkdir -p "$TMPDIR"
            sudo chown -R "$USER":"$USER" "$TMPDIR"

            WAR_FILE="$(ls -t $TMPDIR/*.war | head -n1)"
            if [ ! -f "$WAR_FILE" ]; then
              echo "WAR not found in $TMPDIR"; exit 1
            fi
            echo "WAR_FILE=$WAR_FILE"

            echo "[1/4] Stop Tomcat"
            sudo systemctl stop "$SERVICE" || true

            echo "[2/4] Clean old app & work"
            sudo rm -rf "$WEBAPPS/${CONTEXT}" "$WORKDIR/"*

            echo "[3/4] Deploy new WAR"
            if [ "$CONTEXT" = "ROOT" ]; then
              sudo rm -f "$WEBAPPS/ROOT.war"
              sudo cp "$WAR_FILE" "$WEBAPPS/ROOT.war"
            else
              sudo rm -f "$WEBAPPS/${CONTEXT}.war"
              sudo cp "$WAR_FILE" "$WEBAPPS/${CONTEXT}.war"
            fi

            echo "[4/4] Start Tomcat"
            sudo systemctl start "$SERVICE"

            echo "Health check..."
            for i in $(seq 1 30); do
              if curl -fsS "$HEALTH_URL" >/dev/null 2>&1; then
                echo "Health check OK"; break
              fi
              echo "Retry $i/30..."
              sleep 3
            done

            if ! curl -fsS "$HEALTH_URL" >/dev/null 2>&1; then
              echo "Health check failed. Recent logs:"
              sudo journalctl -u "$SERVICE" -n 200 --no-pager || true
              exit 1
            fi

            echo "Deployed successfully."

      # 8) 실패 시 로그 출력
      - name: Show Tomcat status on failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LS_HOST }}
          username: ${{ secrets.LS_USER }}
          key: ${{ secrets.LS_SSH_KEY }}
          script: |
            sudo systemctl status ${{ env.TOMCAT_SERVICE }} --no-pager || true
            sudo journalctl -u ${{ env.TOMCAT_SERVICE }} -n 200 --no-pager || true
