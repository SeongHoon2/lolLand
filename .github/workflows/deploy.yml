# .github/workflows/deploy.yml
name: Deploy to Lightsail Tomcat

on:
  push:
    branches: [ master ]   # 필요시 [ main, master ]
  workflow_dispatch:

concurrency:
  group: deploy-lightsail
  cancel-in-progress: true

env:
  JAVA_VERSION: '8'
  REMOTE_TOMCAT: '/opt/tomcat'             # CATALINA_BASE fallback
  TOMCAT_SERVICE: 'tomcat'                 # 실제 서비스명
  CONTEXT_NAME: 'ROOT'                     # 루트(/) 사용
  HEALTH_URL: 'http://localhost:8080/auction'  # 실제 200/302 보장 엔드포인트
  REMOTE_TMP: '/tmp/deploy'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify layout
        run: |
          echo "PWD=$PWD"
          test -f "pom.xml" || (echo "pom.xml not found in repo root" && exit 1)

      - name: Set up Temurin JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Install Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven
          mvn -v

      - name: Build WAR with Maven
        run: mvn -B -DskipTests package

      - name: Locate WAR (newest)
        id: locate-war
        shell: bash
        run: |
          set -euo pipefail
          FOUND=$(find "./" -type f -name "*.war" -printf "%T@ %p\n" | sort -nr | head -n1 | awk '{print $2}')
          if [ -z "${FOUND:-}" ]; then
            echo "No WAR found."
            exit 1
          fi
          echo "WAR_PATH=$FOUND" >> "$GITHUB_OUTPUT"
          echo "WAR found at: $FOUND"

      - name: Inspect WAR contents (controllers & views)
        run: |
          WAR="${{ steps.locate-war.outputs.WAR_PATH }}"
          echo "Inspecting $WAR"
          jar tf "$WAR" | grep -Ei 'Controller\.class' || (echo "No controllers found!" && exit 1)
          # 필요 시 JSP 존재 검사 (없어도 실패로 보지 않음)
          jar tf "$WAR" | grep -Ei 'WEB-INF/views/(auction|manageAuction|createAuction)\.jsp' || echo "JSP check: not found or skipped"

      - name: Sanity SSH check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LS_HOST }}
          username: ${{ secrets.LS_USER }}
          key: ${{ secrets.LS_SSH_KEY }}
          script: 'echo "SSH OK on $(hostname)"; uname -a'

      - name: Prep remote tmp (clean)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LS_HOST }}
          username: ${{ secrets.LS_USER }}
          key: ${{ secrets.LS_SSH_KEY }}
          script: |
            set -e
            sudo rm -rf ${{ env.REMOTE_TMP }}
            sudo mkdir -p ${{ env.REMOTE_TMP }}
            sudo chown "$USER":"$USER" ${{ env.REMOTE_TMP }}
            ls -ld ${{ env.REMOTE_TMP }}

      - name: Upload WAR to Lightsail (SCP)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.LS_HOST }}
          username: ${{ secrets.LS_USER }}
          key: ${{ secrets.LS_SSH_KEY }}
          source: "${{ steps.locate-war.outputs.WAR_PATH }}"
          target: ${{ env.REMOTE_TMP }}
          strip_components: 1

      - name: Verify upload on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LS_HOST }}
          username: ${{ secrets.LS_USER }}
          key: ${{ secrets.LS_SSH_KEY }}
          script: |
            echo "List ${{ env.REMOTE_TMP }}:"
            ls -lh ${{ env.REMOTE_TMP }} || true
            echo "Find WARs:"
            find ${{ env.REMOTE_TMP }} -maxdepth 2 -type f -name "*.war" -printf "%TY-%Tm-%Td %TH:%TM %Tp -> %p\n" | sort -r || true

      - name: Deploy & Restart Tomcat (SSH)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LS_HOST }}
          username: ${{ secrets.LS_USER }}
          key: ${{ secrets.LS_SSH_KEY }}
          script: |
            set -euo pipefail

            SERVICE="${{ env.TOMCAT_SERVICE }}"
            FALLBACK_BASE="${{ env.REMOTE_TOMCAT }}"
            TMPDIR="${{ env.REMOTE_TMP }}"
            CONTEXT="${{ env.CONTEXT_NAME }}"
            HEALTH_URL="${{ env.HEALTH_URL }}"

            # --- Detect CATALINA_BASE ---
            CAT_BASE="$(sudo systemctl show "$SERVICE" -p Environment \
              | sed -n 's/^Environment=//p' \
              | tr ' ' '\n' \
              | sed -n 's/^CATALINA_BASE=//p' \
              | sed 's/^"//; s/"$//' \
              | head -n1 || true)"
            if [ -z "$CAT_BASE" ]; then
              CAT_BASE="$(ps -ef \
                | awk '/org.apache.catalina.startup.Bootstrap/ && !/awk|grep/ {
                          for(i=1;i<=NF;i++) if ($i ~ /-Dcatalina.base=/) {
                            split($i,a,"="); sub(/^"/,"",a[2]); sub(/"$/,"",a[2]); print a[2];
                          }
                       }' \
                | head -n1 || true)"
            fi
            [ -z "$CAT_BASE" ] && CAT_BASE="$FALLBACK_BASE"

            WEBAPPS="$CAT_BASE/webapps"
            WORKDIR="$CAT_BASE/work"

            echo "CATALINA_BASE=$CAT_BASE"
            echo "WEBAPPS=$WEBAPPS"

            # 최신 WAR 선택 (mtime 기준)
            WAR_FILE="$(find "$TMPDIR" -type f -name '*.war' -printf '%T@ %p\n' | sort -nr | head -n1 | awk '{print $2}')"
            [ -z "$WAR_FILE" ] && { echo "WAR not found under $TMPDIR"; exit 1; }
            echo "WAR_FILE=$WAR_FILE"

            echo "[1/6] Stop Tomcat"
            sudo systemctl stop "$SERVICE" || true

            echo "[2/6] Clean old app & work"
            if [ "$CONTEXT" = "ROOT" ]; then
              sudo rm -rf "$WEBAPPS/ROOT" "$WEBAPPS/ROOT.war"
            else
              sudo rm -rf "$WEBAPPS/${CONTEXT}" "$WEBAPPS/${CONTEXT}.war"
            fi
            sudo rm -rf "$WORKDIR/"* || true

            echo "[3/6] Deploy new WAR -> $WEBAPPS"
            if [ "$CONTEXT" = "ROOT" ]; then
              DEST="$WEBAPPS/ROOT.war"
            else
              DEST="$WEBAPPS/${CONTEXT}.war"
            fi
            sudo cp "$WAR_FILE" "$DEST"

            # 권한 정리
            if id tomcat >/dev/null 2>&1; then
              sudo chown tomcat:tomcat "$DEST" || true
            fi
            sudo chmod 644 "$DEST" || true

            echo "[4/6] List webapps"
            sudo ls -lh "$WEBAPPS" || true

            echo "[5/6] Start Tomcat"
            sudo systemctl start "$SERVICE"

            echo "[6/6] Health check (2xx/3xx required)"
            ENDPOINTS=(
              "${HEALTH_URL}"
              "http://localhost:8080/auction"
              "http://localhost:8080/manageAuction"
              "http://localhost:8080/createAuction"
            )
            OK=0
            for i in $(seq 1 60); do
              for url in "${ENDPOINTS[@]}"; do
                code=$(curl -sS -o /dev/null -w "%{http_code}" "$url" || true)
                if echo "$code" | grep -Eq '^(2|3)[0-9]{2}$'; then
                  echo "Health OK: $url ($code)"
                  OK=1
                  break
                fi
              done
              [ "$OK" -eq 1 ] && break
              echo "Retry $i/60 ..."
              sleep 3
            done

            if [ "$OK" -ne 1 ]; then
              echo "Health check failed."
              echo "--- systemd logs (last 200) ---"
              sudo journalctl -u "$SERVICE" -n 200 --no-pager || true
              echo "--- catalina.out (last 200) ---"
              [ -f "$CAT_BASE/logs/catalina.out" ] && sudo tail -n 200 "$CAT_BASE/logs/catalina.out" || true
              echo "--- list webapps ---"
              sudo ls -lh "$WEBAPPS" || true
              exit 1
            fi

            echo "Deployed successfully."

      - name: Show Tomcat status on failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LS_HOST }}
          username: ${{ secrets.LS_USER }}
          key: ${{ secrets.LS_SSH_KEY }}
          script: |
            sudo systemctl status ${{ env.TOMCAT_SERVICE }} --no-pager || true
            CAT_BASE="$(sudo systemctl show ${{ env.TOMCAT_SERVICE }} -p Environment | sed -n 's/^Environment=//p' | tr ' ' '\n' | sed -n 's/^CATALINA_BASE=//p' | sed 's/^"//; s/"$//' | head -n1 || true)"
            [ -z "$CAT_BASE" ] && CAT_BASE="$(ps -ef | awk '/org.apache.catalina.startup.Bootstrap/ && !/awk|grep/ { for(i=1;i<=NF;i++) if ($i ~ /-Dcatalina.base=/) { split($i,a,"="); sub(/^"/,"",a[2]); sub(/"$/,"",a[2]); print a[2]; } }' | head -n1 || true)"
            echo "--- catalina.out (last 200) ---"
            [ -f "$CAT_BASE/logs/catalina.out" ] && sudo tail -n 200 "$CAT_BASE/logs/catalina.out" || true
