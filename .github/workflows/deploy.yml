# .github/workflows/deploy.yml
name: Deploy to Lightsail Tomcat

on:
  push:
    branches: [ master ]        # 필요하면 [ main, master ] 로
  workflow_dispatch:

concurrency:
  group: deploy-lightsail
  cancel-in-progress: true

env:
  # ── 환경 맞춤 ──────────────────────────
  JAVA_VERSION: '8'
  REMOTE_TOMCAT: '/opt/tomcat'      # CATALINA_BASE fallback
  TOMCAT_SERVICE: 'tomcat'          # 실제 서비스명
  CONTEXT_NAME: 'ROOT'              # 루트(/) 사용
  HEALTH_URL: 'http://localhost:8080/'  # 앱이 200/302 주는 실제 경로면 더 좋음 (/index.jsp, /health 등)
  REMOTE_TMP: '/tmp/deploy'
  # ─────────────────────────────────────

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify layout
        run: |
          echo "PWD=$PWD"
          test -f "pom.xml" || (echo "pom.xml not found in repo root" && exit 1)

      - name: Set up Temurin JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Install Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven
          mvn -v

      - name: Build WAR with Maven
        run: mvn -B -DskipTests package

      - name: Locate WAR
        id: locate-war
        run: |
          set -e
          FOUND=$(find "." -type f -name "*.war" | head -n 1 || true)
          if [ -z "$FOUND" ]; then
            echo "No WAR found."
            grep -n "<packaging>" pom.xml || true
            find "." -maxdepth 3 -type d -name target -print || true
            exit 1
          fi
          echo "WAR_PATH=$FOUND" >> $GITHUB_OUTPUT
          echo "WAR found at: $FOUND"

      - name: Show artifact
        run: ls -lh "${{ steps.locate-war.outputs.WAR_PATH }}"

      - name: Sanity SSH check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LS_HOST }}
          username: ${{ secrets.LS_USER }}
          key: ${{ secrets.LS_SSH_KEY }}
          script: 'echo "SSH OK on $(hostname)"; uname -a'

      # 업로드: /tmp/deploy/xxx.war 로 평탄화
      - name: Upload WAR to Lightsail (SCP)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.LS_HOST }}
          username: ${{ secrets.LS_USER }}
          key: ${{ secrets.LS_SSH_KEY }}
          source: "${{ steps.locate-war.outputs.WAR_PATH }}"
          target: ${{ env.REMOTE_TMP }}
          strip_components: 1

      - name: Verify upload on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LS_HOST }}
          username: ${{ secrets.LS_USER }}
          key: ${{ secrets.LS_SSH_KEY }}
          script: |
            echo "List ${{ env.REMOTE_TMP }}:"
            ls -lh ${{ env.REMOTE_TMP }} || true
            echo "Find any WAR:"
            find ${{ env.REMOTE_TMP }} -maxdepth 2 -type f -name "*.war" -print || true

      - name: Deploy & Restart Tomcat (SSH)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LS_HOST }}
          username: ${{ secrets.LS_USER }}
          key: ${{ secrets.LS_SSH_KEY }}
          script: |
            set -euo pipefail

            SERVICE="${{ env.TOMCAT_SERVICE }}"
            FALLBACK_BASE="${{ env.REMOTE_TOMCAT }}"
            TMPDIR="${{ env.REMOTE_TMP }}"
            CONTEXT="${{ env.CONTEXT_NAME }}"
            HEALTH_URL="${{ env.HEALTH_URL }}"

            # --- CATALINA_BASE 정확 추출 ---
            CAT_BASE="$(sudo systemctl show "$SERVICE" -p Environment \
              | sed -n 's/^Environment=//p' \
              | tr ' ' '\n' \
              | sed -n 's/^CATALINA_BASE=//p' \
              | sed 's/^"//; s/"$//' \
              | head -n1 || true)"
            if [ -z "$CAT_BASE" ]; then
              CAT_BASE="$(ps -ef \
                | awk '/org.apache.catalina.startup.Bootstrap/ && !/awk|grep/ {
                          for(i=1;i<=NF;i++) if ($i ~ /-Dcatalina.base=/) {
                            split($i,a,"="); sub(/^"/,"",a[2]); sub(/"$/,"",a[2]); print a[2];
                          }
                       }' \
                | head -n1 || true)"
            fi
            [ -z "$CAT_BASE" ] && CAT_BASE="$FALLBACK_BASE"

            WEBAPPS="$CAT_BASE/webapps"
            WORKDIR="$CAT_BASE/work"

            echo "CATALINA_BASE=$CAT_BASE"
            echo "WEBAPPS=$WEBAPPS"

            sudo mkdir -p "$TMPDIR"
            sudo chown -R "$USER":"$USER" "$TMPDIR"

            WAR_FILE="$(find "$TMPDIR" -maxdepth 2 -type f -name '*.war' | head -n1 || true)"
            if [ -z "$WAR_FILE" ]; then
              echo "WAR not found under $TMPDIR"; exit 1
            fi
            echo "WAR_FILE=$WAR_FILE"

            echo "[1/6] Stop Tomcat"
            sudo systemctl stop "$SERVICE" || true

            echo "[2/6] Clean old app & work"
            sudo rm -rf "$WEBAPPS/${CONTEXT}" "$WORKDIR/"* || true

            echo "[3/6] Deploy new WAR -> $WEBAPPS"
            if [ "$CONTEXT" = "ROOT" ]; then
              DEST="$WEBAPPS/ROOT.war"
            else
              DEST="$WEBAPPS/${CONTEXT}.war"
            fi
            sudo rm -f "$DEST"
            sudo cp "$WAR_FILE" "$DEST"

            # 권한/소유자 정리(톰캣이 읽을 수 있게)
            # tomcat 사용자/그룹명이 다르면 변경
            if id tomcat >/dev/null 2>&1; then
              sudo chown tomcat:tomcat "$DEST" || true
            fi
            sudo chmod 644 "$DEST" || true

            echo "[4/6] List webapps"
            sudo ls -lh "$WEBAPPS" || true

            echo "[5/6] Start Tomcat"
            sudo systemctl start "$SERVICE"

            echo "[6/6] Wait for deploy (explode) & health..."
            # 최대 180초 대기: 3초 x 60
            OK=0
            for i in $(seq 1 60); do
              # 1) curl로 2xx/3xx 확인
              if curl -sS -o /dev/null -w "%{http_code}" "$HEALTH_URL" | grep -Eq '^(2|3)[0-9]{2}$'; then
                echo "Health check OK on $HEALTH_URL"; OK=1; break
              fi
              # 2) ROOT 디렉터리(exploded) 생겼는지도 성공 조건으로
              if [ "$CONTEXT" = "ROOT" ] && [ -d "$WEBAPPS/ROOT" ]; then
                echo "Exploded directory $WEBAPPS/ROOT detected. Considering deploy OK."; OK=1; break
              fi
              if [ "$CONTEXT" != "ROOT" ] && [ -d "$WEBAPPS/${CONTEXT}" ]; then
                echo "Exploded directory $WEBAPPS/${CONTEXT} detected. Considering deploy OK."; OK=1; break
              fi
              echo "Retry $i/60 ..."
              sleep 3
            done

            if [ "$OK" -ne 1 ]; then
              echo "Health check failed or app not exploded in time."
              echo "--- systemd logs (last 200) ---"
              sudo journalctl -u "$SERVICE" -n 200 --no-pager || true
              echo "--- catalina.out (last 200) ---"
              [ -f "$CAT_BASE/logs/catalina.out" ] && sudo tail -n 200 "$CAT_BASE/logs/catalina.out" || true
              echo "--- list webapps ---"
              sudo ls -lh "$WEBAPPS" || true
              exit 1
            fi

            echo "Deployed successfully."

      - name: Show Tomcat status on failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LS_HOST }}
          username: ${{ secrets.LS_USER }}
          key: ${{ secrets.LS_SSH_KEY }}
          script: |
            sudo systemctl status ${{ env.TOMCAT_SERVICE }} --no-pager || true
            CAT_BASE="$(sudo systemctl show ${{ env.TOMCAT_SERVICE }} -p Environment | sed -n 's/^Environment=//p' | tr ' ' '\n' | sed -n 's/^CATALINA_BASE=//p' | sed 's/^"//; s/"$//' | head -n1 || true)"
            [ -z "$CAT_BASE" ] && CAT_BASE="$(ps -ef | awk '/org.apache.catalina.startup.Bootstrap/ && !/awk|grep/ { for(i=1;i<=NF;i++) if ($i ~ /-Dcatalina.base=/) { split($i,a,"="); sub(/^"/,"",a[2]); sub(/"$/,"",a[2]); print a[2]; } }' | head -n1 || true)"
            echo "--- catalina.out (last 200) ---"
            [ -f "$CAT_BASE/logs/catalina.out" ] && sudo tail -n 200 "$CAT_BASE/logs/catalina.out" || true
